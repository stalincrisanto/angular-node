{"version":3,"sources":["ng://primeng/confirmdialog/confirmdialog.ts"],"names":["showAnimation","animation","style","transform","opacity","animate","hideAnimation","ConfirmDialog","el","renderer","confirmationService","zone","cd","_this","this","acceptIcon","acceptLabel","acceptVisible","rejectIcon","rejectLabel","rejectVisible","closeOnEscape","blockScroll","closable","autoZIndex","baseZIndex","transitionOptions","focusTrap","_position","transformOptions","subscription","requireConfirmation$","subscribe","confirmation","key","message","icon","header","accept","acceptEvent","EventEmitter","reject","rejectEvent","visible","hide","Object","defineProperty","prototype","_visible","value","maskVisible","onAnimationStart","event","toState","container","element","wrapper","parentElement","contentContainer","DomHandler","findSingle","focus","appendContainer","moveOnTop","bindGlobalListeners","enableModality","onAnimationEnd","onOverlayHide","appendTo","document","body","appendChild","restoreAppend","nativeElement","addClass","disableModality","removeClass","detectChanges","close","emit","preventDefault","zIndex","String","zindex","getWrapperClass","wrapperClass","ui-widget-overlay ui-dialog-mask","ui-dialog-mask-scrollblocker","getPositionClass","toString","pos","find","item","position","documentEscapeListener","listen","which","parseInt","focusableElements","getFocusableElements","length","activeElement","focusedIndex","indexOf","shiftKey","unbindGlobalListeners","ngOnDestroy","unsubscribe","ElementRef","Renderer2","ConfirmationService","NgZone","ChangeDetectorRef","__decorate","Input","ContentChild","Footer","static","ViewChild","Component","selector","template","animations","trigger","transition","useAnimation","ConfirmDialogModule","NgModule","imports","CommonModule","ButtonModule","exports","SharedModule","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,OnDestroy,Input,EventEmitter,Renderer2,ContentChild,NgZone,ViewChild, ChangeDetectorRef} from '@angular/core';\nimport {trigger,state,style,transition,animate,AnimationEvent, useAnimation, animation} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {DomHandler} from 'primeng/dom';\nimport {Footer,SharedModule} from 'primeng/api';\nimport {ButtonModule} from 'primeng/button';\nimport {Confirmation} from 'primeng/api';\nimport {ConfirmationService} from 'primeng/api';\nimport {Subscription}   from 'rxjs';\n\nconst showAnimation = animation([\n    style({ transform: '{{transform}}', opacity: 0 }),\n    animate('{{transition}}', style({ transform: 'none', opacity: 1 }))\n]);\n\nconst hideAnimation = animation([\n    animate('{{transition}}', style({ transform: '{{transform}}', opacity: 0 }))\n]);\n@Component({\n    selector: 'p-confirmDialog',\n    template: `\n        <div class=\"ui-dialog-wrapper\" [ngClass]=\"getWrapperClass()\" *ngIf=\"maskVisible\">\n            <div [ngClass]=\"{'ui-dialog ui-confirmdialog ui-widget ui-widget-content ui-corner-all ui-shadow':true,'ui-dialog-rtl':rtl}\" [ngStyle]=\"style\" [class]=\"styleClass\" (mousedown)=\"moveOnTop()\"\n                [@animation]=\"{value: 'visible', params: {transform: transformOptions, transition: transitionOptions}}\" (@animation.start)=\"onAnimationStart($event)\" (@animation.done)=\"onAnimationEnd($event)\" *ngIf=\"visible\">\n                <div class=\"ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top\">\n                    <span class=\"ui-dialog-title\" *ngIf=\"header\">{{header}}</span>\n                    <div class=\"ui-dialog-titlebar-icons\">\n                        <a *ngIf=\"closable\" [ngClass]=\"{'ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all':true}\" tabindex=\"0\" role=\"button\" (click)=\"close($event)\" (keydown.enter)=\"close($event)\">\n                            <span class=\"pi pi-times\"></span>\n                        </a>\n                    </div>\n                </div>\n                <div #content class=\"ui-dialog-content ui-widget-content\">\n                    <i [ngClass]=\"'ui-confirmdialog-icon'\" [class]=\"icon\" *ngIf=\"icon\"></i>\n                    <span class=\"ui-confirmdialog-message\" [innerHTML]=\"message\"></span>\n                </div>\n                <div class=\"ui-dialog-footer ui-widget-content\" *ngIf=\"footer\">\n                    <ng-content select=\"p-footer\"></ng-content>\n                </div>\n                <div class=\"ui-dialog-footer ui-widget-content\" *ngIf=\"!footer\">\n                    <button type=\"button\" pButton [icon]=\"acceptIcon\" [label]=\"acceptLabel\" (click)=\"accept()\" [class]=\"acceptButtonStyleClass\" *ngIf=\"acceptVisible\"></button>\n                    <button type=\"button\" pButton [icon]=\"rejectIcon\" [label]=\"rejectLabel\" (click)=\"reject()\" [class]=\"rejectButtonStyleClass\" *ngIf=\"rejectVisible\"></button>\n                </div>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('animation', [\n            transition('void => visible', [\n                useAnimation(showAnimation)\n            ]),\n            transition('visible => void', [\n                useAnimation(hideAnimation)\n            ])\n        ])\n    ]\n})\nexport class ConfirmDialog implements OnDestroy {\n\n    @Input() header: string;\n    \n    @Input() icon: string;\n    \n    @Input() message: string;\n\n    @Input() style: any;\n    \n    @Input() styleClass: string;\n    \n    @Input() acceptIcon: string = 'pi pi-check';\n    \n    @Input() acceptLabel: string = 'Yes';\n    \n    @Input() acceptVisible: boolean = true;\n\n    @Input() rejectIcon: string = 'pi pi-times';\n    \n    @Input() rejectLabel: string = 'No';\n    \n    @Input() rejectVisible: boolean = true;\n    \n    @Input() acceptButtonStyleClass: string;\n    \n    @Input() rejectButtonStyleClass: string;\n\n    @Input() closeOnEscape: boolean = true;\n\n    @Input() blockScroll: boolean = true;\n\n    @Input() rtl: boolean;\n\n    @Input() closable: boolean = true;\n    \n    @Input() appendTo: any;\n    \n    @Input() key: string;\n\n    @Input() autoZIndex: boolean = true;\n    \n    @Input() baseZIndex: number = 0;\n    \n    @Input() transitionOptions: string = '150ms cubic-bezier(0, 0, 0.2, 1)';\n\n    @Input() focusTrap: boolean = true;\n\n    @Input() get visible(): any {\n        return this._visible;\n    }\n    set visible(value:any) {\n        this._visible = value;\n        \n        if (this._visible && !this.maskVisible) {\n            this.maskVisible = true;\n        }\n    }\n\n    \n    @Input() get position(): string {\n        return this._position;\n    };\n\n    set position(value: string) {\n        this._position = value;\n\n        switch (value) {\n            case 'topleft':\n            case 'bottomleft':\n            case 'left':\n                this.transformOptions = \"translate3d(-100%, 0px, 0px)\";\n            break;\n            case 'topright':\n            case 'bottomright':\n            case 'right':\n                this.transformOptions = \"translate3d(100%, 0px, 0px)\";\n            break;\n            case 'bottom':\n                this.transformOptions = \"translate3d(0px, 100%, 0px)\";\n            break;\n            case 'top':\n                this.transformOptions = \"translate3d(0px, -100%, 0px)\";\n            break;\n            default:\n                this.transformOptions = \"scale(0.7)\";\n            break;\n        }\n    }\n\n    @ContentChild(Footer, { static: true }) footer;\n\n    @ViewChild('content', { static: true }) contentViewChild: ElementRef;\n    \n    confirmation: Confirmation;\n        \n    _visible: boolean;\n\n    maskVisible: boolean;\n    \n    documentEscapeListener: any;\n        \n    container: HTMLDivElement;\n\n    wrapper: HTMLElement;\n        \n    contentContainer: HTMLDivElement;\n      \n    subscription: Subscription;\n\n    preWidth: number;\n\n    _position: string = \"center\";\n\n    transformOptions: any = \"scale(0.7)\";\n                \n    constructor(public el: ElementRef, public renderer: Renderer2, private confirmationService: ConfirmationService, public zone: NgZone, private cd: ChangeDetectorRef) {\n        this.subscription = this.confirmationService.requireConfirmation$.subscribe(confirmation => {\n            if (!confirmation) {\n                this.hide();\n                return;\n            }\n\n            if (confirmation.key === this.key) {\n                this.confirmation = confirmation;\n                this.message = this.confirmation.message||this.message;\n                this.icon = this.confirmation.icon||this.icon;\n                this.header = this.confirmation.header||this.header;\n                this.rejectVisible = this.confirmation.rejectVisible == null ? this.rejectVisible : this.confirmation.rejectVisible;\n                this.acceptVisible = this.confirmation.acceptVisible == null ? this.acceptVisible : this.confirmation.acceptVisible;\n                this.acceptLabel = this.confirmation.acceptLabel||this.acceptLabel;\n                this.rejectLabel = this.confirmation.rejectLabel||this.rejectLabel;\n                this.acceptIcon = this.confirmation.acceptIcon || this.acceptIcon;\n                this.rejectIcon = this.confirmation.rejectIcon || this.rejectIcon;\n\n                if (this.confirmation.accept) {\n                    this.confirmation.acceptEvent = new EventEmitter();\n                    this.confirmation.acceptEvent.subscribe(this.confirmation.accept);\n                }\n                \n                if (this.confirmation.reject) {\n                    this.confirmation.rejectEvent = new EventEmitter();\n                    this.confirmation.rejectEvent.subscribe(this.confirmation.reject);\n                }\n\n                if (this.confirmation.blockScroll === false || this.confirmation.blockScroll === true) {\n                    this.blockScroll = this.confirmation.blockScroll;\n                }\n\n                this.visible = true;\n            }\n        });         \n    }\n\n    onAnimationStart(event: AnimationEvent) {\n        switch(event.toState) {\n            case 'visible':\n                this.container = event.element;\n                this.wrapper = this.container.parentElement;\n                this.contentContainer = DomHandler.findSingle(this.container, '.ui-dialog-content');\n                \n                if (this.acceptVisible || this.rejectVisible) {\n                    DomHandler.findSingle(this.container, 'button').focus();\n                }\n\n                this.appendContainer();\n                this.moveOnTop();\n                this.bindGlobalListeners();\n                this.enableModality();\n            break;\n        }\n    }\n\n    onAnimationEnd(event: AnimationEvent) {\n        switch(event.toState) {\n            case 'void':\n                this.onOverlayHide();\n            break;\n        }\n    }\n\n    appendContainer() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.wrapper);\n            else\n                DomHandler.appendChild(this.wrapper, this.appendTo);\n        }\n    }\n\n    restoreAppend() {\n        if (this.wrapper && this.appendTo) {\n            this.el.nativeElement.appendChild(this.wrapper);\n        }\n    }\n        \n    enableModality() {\n        if (this.blockScroll) {\n            DomHandler.addClass(document.body, 'ui-overflow-hidden');\n        }\n    }\n    \n    disableModality() {\n        this.maskVisible = false;\n\n        if (this.blockScroll) {            \n            DomHandler.removeClass(document.body, 'ui-overflow-hidden');\n        }\n\n        if (this.container) {\n            this.cd.detectChanges();\n        }\n    }\n    \n    close(event: Event) {\n        if (this.confirmation.rejectEvent) {\n            this.confirmation.rejectEvent.emit();\n        }\n        \n        this.hide();\n        event.preventDefault();\n    }\n    \n    hide() {\n        this.visible = false;\n    }\n    \n    moveOnTop() {\n        if (this.autoZIndex) {\n            this.container.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n            this.wrapper.style.zIndex = String(this.baseZIndex + (DomHandler.zindex - 1));\n        }\n    }\n\n    getWrapperClass() {\n        let wrapperClass = {'ui-widget-overlay ui-dialog-mask': true, 'ui-dialog-mask-scrollblocker':this.blockScroll};\n        wrapperClass[this.getPositionClass().toString()] = true;\n        return wrapperClass;\n    }\n\n    getPositionClass() {\n        const positions = ['left', 'right', 'top', 'topleft', 'topright', 'bottom', 'bottomleft', 'bottomright'];\n        const pos = positions.find(item => item === this.position);\n\n        return pos ? `ui-dialog-${pos}` : '';\n    }\n    \n    bindGlobalListeners() {\n        if ((this.closeOnEscape && this.closable) || this.focusTrap && !this.documentEscapeListener) {\n            this.documentEscapeListener = this.renderer.listen('document', 'keydown', (event) => {\n                if (event.which == 27 && (this.closeOnEscape && this.closable)) {\n                    if (parseInt(this.container.style.zIndex) === (DomHandler.zindex + this.baseZIndex) && this.visible)Â {\n                        this.close(event);\n                    }\n                }\n\n                if (event.which === 9 && this.focusTrap) {\n                    event.preventDefault();\n                    \n                    let focusableElements = DomHandler.getFocusableElements(this.container);\n    \n                    if (focusableElements && focusableElements.length > 0) {\n                        if (!document.activeElement) {\n                            focusableElements[0].focus();\n                        }\n                        else {\n                            let focusedIndex = focusableElements.indexOf(document.activeElement);\n    \n                            if (event.shiftKey) {\n                                if (focusedIndex == -1 || focusedIndex === 0)\n                                    focusableElements[focusableElements.length - 1].focus();\n                                else\n                                    focusableElements[focusedIndex - 1].focus();\n                            }\n                            else {\n                                if (focusedIndex == -1 || focusedIndex === (focusableElements.length - 1))\n                                    focusableElements[0].focus();\n                                else\n                                    focusableElements[focusedIndex + 1].focus();\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    }\n    \n    unbindGlobalListeners() {\n        if (this.documentEscapeListener) {\n            this.documentEscapeListener();\n            this.documentEscapeListener = null;\n        }\n    }\n\n    onOverlayHide() {\n        this.disableModality();\n        this.unbindGlobalListeners();\n        this.container = null;\n    }\n                \n    ngOnDestroy() {\n        this.restoreAppend();\n        this.onOverlayHide();\n        this.subscription.unsubscribe();\n    }\n    \n    accept() {\n        if (this.confirmation.acceptEvent) {\n            this.confirmation.acceptEvent.emit();\n        }\n        \n        this.hide();\n        this.confirmation = null;\n    }\n    \n    reject() {\n        if (this.confirmation.rejectEvent) {\n            this.confirmation.rejectEvent.emit();\n        }\n        \n        this.hide();\n        this.confirmation = null;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,ButtonModule],\n    exports: [ConfirmDialog,ButtonModule,SharedModule],\n    declarations: [ConfirmDialog]\n})\nexport class ConfirmDialogModule { }"]}